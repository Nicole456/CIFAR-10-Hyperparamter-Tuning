1
00:00:00,000 --> 00:00:02,700
Now there's one additional trick that we need to add to

2
00:00:02,700 --> 00:00:04,527
make the protocol truly secure.

3
00:00:04,527 --> 00:00:07,755
The issue here with this over simplified protocol is that,

4
00:00:07,755 --> 00:00:10,635
when we split Bob's X into a two and a three,

5
00:00:10,635 --> 00:00:12,810
because we're decrypting through a simple addition,

6
00:00:12,810 --> 00:00:16,050
if we assume that we're using positive numbers for our shares,

7
00:00:16,050 --> 00:00:20,415
then Bob actually knows a little bit about the shared number when receiving his share.

8
00:00:20,415 --> 00:00:24,125
That is, that the shared number is at least greater than two.

9
00:00:24,125 --> 00:00:26,195
It's not a lot of leaked information,

10
00:00:26,195 --> 00:00:27,270
but it's a little bit.

11
00:00:27,270 --> 00:00:31,145
It's something we can simply address by modifying our protocol just slightly.

12
00:00:31,145 --> 00:00:35,655
That is the decryption process which will actually be shares summed together,

13
00:00:35,655 --> 00:00:37,300
modulus as some number Q.

14
00:00:37,300 --> 00:00:39,605
Typically a very large prime number.

15
00:00:39,605 --> 00:00:41,270
What this means that,

16
00:00:41,270 --> 00:00:43,490
there is now an infinite number of shares,

17
00:00:43,490 --> 00:00:44,730
that Bob could have,

18
00:00:44,730 --> 00:00:46,815
that would mark the same alpha value.

19
00:00:46,815 --> 00:00:49,120
So we can actually see in this example,

20
00:00:49,120 --> 00:00:52,610
Bob share is quite large and Alice's share is also quite large.

21
00:00:52,610 --> 00:00:55,805
But the decryption is actually still just a simple five.

22
00:00:55,805 --> 00:00:57,110
So with this protocol,

23
00:00:57,110 --> 00:00:59,135
the addition that we saw before still works,

24
00:00:59,135 --> 00:01:01,870
but we get this final added protection.

