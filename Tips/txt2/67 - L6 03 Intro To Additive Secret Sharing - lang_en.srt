1
00:00:00,000 --> 00:00:05,160
In this concept, now we're going to try to improve upon the previous setting.

2
00:00:05,160 --> 00:00:08,100
While having a trusted aggregator is certainly a nice feature,

3
00:00:08,100 --> 00:00:10,380
the problem is that in some cases there

4
00:00:10,380 --> 00:00:12,870
won't be a natural person to actually fill this role.

5
00:00:12,870 --> 00:00:16,200
It can be a bit inconvenient and maybe suboptimal to still

6
00:00:16,200 --> 00:00:19,590
have to trust someone to actually see the raw version of the gradients,

7
00:00:19,590 --> 00:00:22,035
that each individual data owner is generating.

8
00:00:22,035 --> 00:00:23,520
So we'd like to do instead,

9
00:00:23,520 --> 00:00:26,850
is we'd like to leverage a form of cryptography called additive secret

10
00:00:26,850 --> 00:00:28,740
sharing to make it so that we can

11
00:00:28,740 --> 00:00:31,830
actually aggregate these gradients in an encrypted state.

12
00:00:31,830 --> 00:00:33,750
The idea here being that,

13
00:00:33,750 --> 00:00:37,110
we can perform the aggregation while the ingredients are still

14
00:00:37,110 --> 00:00:42,045
encrypted thus no individual person will actually see what those gradients are.

15
00:00:42,045 --> 00:00:44,090
In particular, in order to do this,

16
00:00:44,090 --> 00:00:49,225
we first need to introduce a new form of cryptography called additive secret sharing.

17
00:00:49,225 --> 00:00:53,585
This additive secret sharing is just a simple technique that allows

18
00:00:53,585 --> 00:00:56,930
multiple different individuals to add numbers

19
00:00:56,930 --> 00:01:01,390
together without finding out what anyone else's original number was.

20
00:01:01,390 --> 00:01:04,585
So, if we have two individuals, Alice and Bob,

21
00:01:04,585 --> 00:01:08,180
they can each compute the sum of a number that each of them own

22
00:01:08,180 --> 00:01:12,290
without actually revealing what their inputs are to the other person.

23
00:01:12,290 --> 00:01:14,735
To explain this, I want us to consider

24
00:01:14,735 --> 00:01:17,240
less from an encryption standard point and more from

25
00:01:17,240 --> 00:01:21,965
a shared ownership or shared governance of a number of kind of standpoint.

26
00:01:21,965 --> 00:01:23,610
So let's consider this variable x.

27
00:01:23,610 --> 00:01:25,440
Will say x equals five.

28
00:01:25,440 --> 00:01:29,390
Then we're going to do is, we're going to split this x into two shares, okay?

29
00:01:29,390 --> 00:01:31,010
So we're going to have Bob's share,

30
00:01:31,010 --> 00:01:34,610
which is a two, and we're going to have Alice's share, which is a three.

31
00:01:34,610 --> 00:01:37,120
Two plus three equals five, which is how we will store it.

32
00:01:37,120 --> 00:01:42,265
You'll notice that we can sort of decrypt x by simply adding these two shares together.

33
00:01:42,265 --> 00:01:45,395
The most important thing to take away from this is to notice that

34
00:01:45,395 --> 00:01:49,085
Bob by just looking at his own shares, the number two,

35
00:01:49,085 --> 00:01:51,710
has no idea what x actually

36
00:01:51,710 --> 00:01:56,360
is because this shared doesn't actually describe any information about x.

37
00:01:56,360 --> 00:01:59,830
We see the same for Alice's share, three.

38
00:01:59,830 --> 00:02:02,805
But the truly fascinating part about this is that,

39
00:02:02,805 --> 00:02:06,950
while Bob and Alice in this shared state can actually

40
00:02:06,950 --> 00:02:11,930
perform computation or arithmetic on this number that is split between them.

41
00:02:11,930 --> 00:02:14,240
So if we see here, let's say that Bob and Alice

42
00:02:14,240 --> 00:02:16,805
wanted to multiply this hidden number by two.

43
00:02:16,805 --> 00:02:19,460
If Bob multiplies his share by two,

44
00:02:19,460 --> 00:02:22,900
two times two is four and Alice multiplies her share by two,

45
00:02:22,900 --> 00:02:24,070
three times two is six,

46
00:02:24,070 --> 00:02:25,495
then we look at the result,

47
00:02:25,495 --> 00:02:26,840
we'll see that when we decrypt it,

48
00:02:26,840 --> 00:02:30,215
it actually decrypts to 10 instead of a five.

49
00:02:30,215 --> 00:02:34,430
So as you can see this technique seems to work quite well and it's extremely efficient.

50
00:02:34,430 --> 00:02:38,540
There's not a lot of extra computation that's required and we can even use it for

51
00:02:38,540 --> 00:02:42,800
the use case we care about here of adding two different numbers together.

52
00:02:42,800 --> 00:02:45,650
So let's say we have the number five, which is Bob's number.

53
00:02:45,650 --> 00:02:48,275
He splits it into two shares and sends one to Alice.

54
00:02:48,275 --> 00:02:53,375
So Bob has a share which is a two and Alice has share which is a three, same as before.

55
00:02:53,375 --> 00:02:55,550
But let's say we have another number,

56
00:02:55,550 --> 00:02:58,355
an encrypted seven for the variable y.

57
00:02:58,355 --> 00:03:01,685
Bob's shares is five and Alice's shares is two,

58
00:03:01,685 --> 00:03:03,440
five plus two is seven.

59
00:03:03,440 --> 00:03:07,230
What we see here is that, if Bob adds his two shares together,

60
00:03:07,230 --> 00:03:10,965
his x share and his y share and Alice adds her shares together,

61
00:03:10,965 --> 00:03:12,230
her x share and y share,

62
00:03:12,230 --> 00:03:18,815
then Bob and Alice have just created a new shared number which will decrypt to equal 12.

63
00:03:18,815 --> 00:03:22,280
So we just added five plus seven equals 12.

64
00:03:22,280 --> 00:03:23,930
The nice thing here is that,

65
00:03:23,930 --> 00:03:28,370
this is a really simple protocol for being able to do encrypted edition

66
00:03:28,370 --> 00:03:32,945
such that neither Bob nor Alice see any of the inputs.

67
00:03:32,945 --> 00:03:38,300
They only see the inputs that they bring to the table and that's a really nice property.

68
00:03:38,300 --> 00:03:42,170
However, the protocol is still broken in one important way,

69
00:03:42,170 --> 00:03:44,830
which will fix in the next video.

