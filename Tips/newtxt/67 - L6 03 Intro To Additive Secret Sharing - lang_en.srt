In this concept, now we're going to try to improve upon the previous setting.
While having a trusted aggregator is certainly a nice feature,
the problem is that in some cases there
won't be a natural person to actually fill this role.
It can be a bit inconvenient and maybe suboptimal to still
have to trust someone to actually see the raw version of the gradients,
that each individual data owner is generating.
So we'd like to do instead,
is we'd like to leverage a form of cryptography called additive secret
sharing to make it so that we can
actually aggregate these gradients in an encrypted state.
The idea here being that,
we can perform the aggregation while the ingredients are still
encrypted thus no individual person will actually see what those gradients are.
In particular, in order to do this,
we first need to introduce a new form of cryptography called additive secret sharing.
This additive secret sharing is just a simple technique that allows
multiple different individuals to add numbers
together without finding out what anyone else's original number was.
So, if we have two individuals, Alice and Bob,
they can each compute the sum of a number that each of them own
without actually revealing what their inputs are to the other person.
To explain this, I want us to consider
less from an encryption standard point and more from
a shared ownership or shared governance of a number of kind of standpoint.
So let's consider this variable x.
Will say x equals five.
Then we're going to do is, we're going to split this x into two shares, okay?
So we're going to have Bob's share,
which is a two, and we're going to have Alice's share, which is a three.
Two plus three equals five, which is how we will store it.
You'll notice that we can sort of decrypt x by simply adding these two shares together.
The most important thing to take away from this is to notice that
Bob by just looking at his own shares, the number two,
has no idea what x actually
is because this shared doesn't actually describe any information about x.
We see the same for Alice's share, three.
But the truly fascinating part about this is that,
while Bob and Alice in this shared state can actually
perform computation or arithmetic on this number that is split between them.
So if we see here, let's say that Bob and Alice
wanted to multiply this hidden number by two.
If Bob multiplies his share by two,
two times two is four and Alice multiplies her share by two,
three times two is six,
then we look at the result,
we'll see that when we decrypt it,
it actually decrypts to 10 instead of a five.
So as you can see this technique seems to work quite well and it's extremely efficient.
There's not a lot of extra computation that's required and we can even use it for
the use case we care about here of adding two different numbers together.
So let's say we have the number five, which is Bob's number.
He splits it into two shares and sends one to Alice.
So Bob has a share which is a two and Alice has share which is a three, same as before.
But let's say we have another number,
an encrypted seven for the variable y.
Bob's shares is five and Alice's shares is two,
five plus two is seven.
What we see here is that, if Bob adds his two shares together,
his x share and his y share and Alice adds her shares together,
her x share and y share,
then Bob and Alice have just created a new shared number which will decrypt to equal 12.
So we just added five plus seven equals 12.
The nice thing here is that,
this is a really simple protocol for being able to do encrypted edition
such that neither Bob nor Alice see any of the inputs.
They only see the inputs that they bring to the table and that's a really nice property.
However, the protocol is still broken in one important way,
which will fix in the next video.
